0:なし（床）
1:相手
2:ブロック
3:アイテム

완전 벽의 경우도 블럭(2)로 판정

wayList = ['up','left','down','right']

wayListNum = {'up': '0 1 2', 'left': '0 3 6', 'down': '6 7 8','right': '2 5 8'}

firstmove = False

viewpoint = 'None'
lookbool = None
firstway = None
Evalue = None
enemy = None
item_loca = None
lookvalue = None
space = None
Exit = None
lastMove = None

f.write('\n')




movemain = {'up' : 'client.walk_up()', 'down' : 'client.walk_down()', 'left' : 'client.walk_left()', 'right' : 'client.walk_right()', 'None' : 'pass'}

Nviewpoint = {'up':'down','left':'right','down':'up','right':'left'}

moveList = [[['up', 'left'],['left','up']],['up'],[['up', 'right'],['right','up']],['left'],['right'],[['down', 'left'],['left','down']],['down'],[['down', 'right'],['right','down']]]

leftRight = {'up':['3','5'], 'left':['7','1'], 'right':['1','7'], 'down':['5','3']}

diagoline = {0: ['1','3'], 2: ['1','5'], 6 : ['7','3'], 8: ['5','7']}

waypoint = {'up':'1','left':'3','down':'5','right':'7'}

changeViewp = {1:'up', 3:'left',5:'right',7:'down'}

viewleftRight = {'up': ['0','2'], 'left' : ['6','0'], 'right' : ['2','8'], 'down': ['8','6']}

toMove = {1 : 'up', 3 : 'left', 5 : 'right', 7 : 'down'}
Moveto = {'up' : 1, 3 : 'left', 'right' : 5, 'down' : 7}

def find_index(data, target):
    res = []
    lis = data
    while True:
    try:
        res.append(lis.index(target) + (res[-1]+1 if len(res)!=0 else 0))
        lis = data[res[-1]+1:]
    except:
        break
    return res

def get_key(val, dic):
    for key, value in dic.items():
        if val == value:
            return key
    return('키가 없습니다')

def Delitem(value):

상하좌우 방향 기준 이동 요약
앞 :
value = eval(f'client.walk{viewpoint}()')

뒤 :
value = eval(f'client.walk{Nviewpoint[viewpoint]}()')

왼 :
value = eval(f'client.walk{toMove[int(leftRight[Moveto[viewpoint]][0])]}()')

오 :
value = eval(f'client.walk{toMove[int(leftRight[Moveto[viewpoint]][1])]}()')

last error log:
######################################################################################

######################################################################################

down 기준 #error.png <- 참고


1. 정면일때
1-1. look 하고 bool 설정
1-2. bool 보고 look 검토 후 실행 후 bool 초기화
2. 대각선일때
2-1. 대각선에서 가까워지기
2-2. 안되면 다른거

1. 아이템 우선순위 설정(find_index 함수)
2. 안되는 아이템 위치 없에기(for문 리스트 pop)
3. look하기
4. 안되면 리스트에 추가시키기
5. 백




아이템 기존 코드

value = eval(f'client.walk_{viewpoint}()')
                    value = client.get_ready()
                    value = eval(f'client.walk_{Nviewpoint[viewpoint]}()')
                elif value[1] == 3 or value[3] == 3 or value[5] == 3  or value[7] == 3:
                    print('item in UDLR')
                    valueBool = type(value.index(3)) == list
                    if valueBool:
                        item_loca = value.index(3)[0]
                    else:
                        item_loca = value.index(3)
                    viewpoint = toMove[item_loca]
                    value = eval(f'client.look_{viewpoint}()')
                else:#정면이 아닌 다른곳에 아이템이 있을때(대각선)
                    print('item in diagonal')
                    valueBool = type(value.index(3)) == list
                    if valueBool:
                        item_loca = value.index(3)[0]
                    else:
                        item_loca = value.index(3)
                    space = None
                    for i in diagoline[item_loca]:
                        if value[i] == 0:
                            space = i
                            return
                        else:
                            continue
                    if space != None:
                        value = eval(f'client.walk_{toMove[space]}()')
                        lastMove = toMove[space]
                    else:
                        Exit = None
                        ExitList = [1,3,5,7]
                        for i in ExitList:
                            if value[i] == Moveto[Nviewpoint[lastMove]]:
                                continue
                            if value[i] == 2:
                                continue
                            elif value[i] == 0 or value[i] == 3:
                                Exit = i
                                break
                            else:
                                break
                        if Exit != None:
                            value = eval(f'client.walk_{toMove[Exit]}')
                            viewpoint = toMove[Exit]
                            lastMove = toMove[Exit]